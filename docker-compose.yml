services:
  db_ea:
    image: postgres:14  
    container_name: postgresql_ea
    restart: always
    volumes:
      - db-ea-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
  backend_ea:
    build:
      context: ./backend    
    image: mywebapp/backend:latest
    container_name: backend_ea
    ports:
      - 4500:8000
    volumes:
      - ./backend/app:/app
      - static-ea-data:/vol/web
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - DB_HOST=db_ea
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
    depends_on:
      - db_ea


  websockets:
    image: mywebapp/backend:latest
    container_name: websocket_ea
    command: >
      sh -c "daphne -b 0.0.0.0 -p 8080 app.asgi:application"
    ports:
      - 8080:8080
    environment:
      - DB_HOST=db_ea
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
    depends_on:
      - backend_ea
      - db_ea

  frontend:
    build:
      context: ./frontend-app
      dockerfile: Dockerfile
    image: my-frontend:latest
    ports:
      - "4200:81"  # map nginx:81 to host:4200
    restart: unless-stopped
    depends_on:
      - backend_ea
      - db_ea



  proxy:
    build:
      context: ./proxy
    container_name: proxy_ea
    restart: always

    environment:
      - APP_UPSTREAM=backend_ea:8000     # matches backend internal port
      - WS_UPSTREAM=websockets:8080   # matches websockets internal port

    depends_on:
      - backend_ea
      - websockets
    ports:
      - 80:80
    volumes:
      - ./frontend-app/dist/frontend-app:/usr/share/nginx/html:ro
      - static-ea-data:/vol/static
  



volumes:
  db-ea-data:
  static-ea-data:

      