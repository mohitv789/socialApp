# Generated by Django 4.2 on 2024-01-28 14:32

import core.models
from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('email', models.CharField(max_length=255, unique=True)),
                ('username', models.CharField(default=models.CharField(max_length=255, unique=True), max_length=255)),
                ('password', models.CharField(max_length=255)),
                ('tfa_secret', models.CharField(default='', max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Reel',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('caption', models.CharField(max_length=255)),
                ('image', models.ImageField(null=True, upload_to=core.models.reel_image_file_path)),
                ('celebrates', models.ManyToManyField(blank=True, related_name='reel_celebrates', to=settings.AUTH_USER_MODEL)),
                ('likes', models.ManyToManyField(blank=True, related_name='reel_likes', to=settings.AUTH_USER_MODEL)),
                ('loves', models.ManyToManyField(blank=True, related_name='reel_loves', to=settings.AUTH_USER_MODEL)),
                ('reel_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Reset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(max_length=255)),
                ('token', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=255)),
                ('longDescription', models.TextField()),
                ('image', models.ImageField(null=True, upload_to=core.models.story_image_file_path)),
                ('celebrates', models.ManyToManyField(blank=True, related_name='story_celebrates', to=settings.AUTH_USER_MODEL)),
                ('likes', models.ManyToManyField(blank=True, related_name='story_likes', to=settings.AUTH_USER_MODEL)),
                ('loves', models.ManyToManyField(blank=True, related_name='story_loves', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('reels', models.ManyToManyField(related_name='reels', to='core.reel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('token', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expired_at', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('avatar', models.ImageField(null=True, upload_to=core.models.profile_image_file_path)),
                ('status', models.TextField()),
                ('bio', models.TextField()),
                ('gender', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('url', models.TextField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StoryReactionActivityFeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('action', models.CharField(choices=[('lik', 'Liked'), ('lov', 'Loved'), ('cel', 'Celebrated'), ('ulk', 'Unliked'), ('ulv', 'Unloved'), ('ucl', 'Uncelebrated')], max_length=3)),
                ('currentUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='story_current_user', to=settings.AUTH_USER_MODEL)),
                ('doneByUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='story_action_user', to=settings.AUTH_USER_MODEL)),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.story')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StoryFeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('feedCelebratedStory', models.ManyToManyField(blank=True, related_name='feed_Celebrated_Story', to='core.story')),
                ('feedLikedStory', models.ManyToManyField(blank=True, related_name='feed_Liked_Story', to='core.story')),
                ('feedLovedStory', models.ManyToManyField(blank=True, related_name='feed_Loved_Story', to='core.story')),
                ('feedUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('feedVisitedStory', models.ManyToManyField(blank=True, related_name='feed_Visited_Story', to='core.story')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StoryCommentActivityFeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('comment_id', models.IntegerField()),
                ('action', models.CharField(choices=[('comm', 'Posted Comment'), ('ecom', 'Edited Comment')], max_length=4)),
                ('commentByUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scommented_by_user', to=settings.AUTH_USER_MODEL)),
                ('commentedOnUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scommented_on_user', to=settings.AUTH_USER_MODEL)),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.story')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StoryComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('storycomment', models.TextField()),
                ('approval', models.CharField(choices=[('app', 'Approved'), ('rej', 'Rejected')], max_length=3)),
                ('commented_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.story')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StoryChatroom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('participants', models.ManyToManyField(related_name='storychat_participants', to=settings.AUTH_USER_MODEL)),
                ('story', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.story')),
            ],
        ),
        migrations.CreateModel(
            name='StoryChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('chatroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='storychat_message', to='core.storychatroom')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='story',
            name='tags',
            field=models.ManyToManyField(blank=True, to='core.tag'),
        ),
        migrations.CreateModel(
            name='ReelReactionActivityFeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('action', models.CharField(choices=[('lik', 'Liked'), ('lov', 'Loved'), ('cel', 'Celebrated'), ('ulk', 'Unliked'), ('ulv', 'Unloved'), ('ucl', 'Uncelebrated')], max_length=3)),
                ('currentUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reel_current_user', to=settings.AUTH_USER_MODEL)),
                ('doneByUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reel_action_user', to=settings.AUTH_USER_MODEL)),
                ('reel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.reel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReelFeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('feedCelebratedReel', models.ManyToManyField(blank=True, related_name='feed_Celebrated_Reel', to='core.reel')),
                ('feedLikedReel', models.ManyToManyField(blank=True, related_name='feed_Liked_Reel', to='core.reel')),
                ('feedLovedReel', models.ManyToManyField(blank=True, related_name='feed_Loved_Reel', to='core.reel')),
                ('feedUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('feedVisitedReel', models.ManyToManyField(blank=True, related_name='feed_Visited_Reel', to='core.reel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReelCommentActivityFeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('comment_id', models.IntegerField()),
                ('action', models.CharField(choices=[('comm', 'Posted Comment'), ('ecom', 'Edited Comment')], max_length=4)),
                ('commentByUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rcommented_by_user', to=settings.AUTH_USER_MODEL)),
                ('commentedOnUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rcommented_on_user', to=settings.AUTH_USER_MODEL)),
                ('reel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.reel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReelComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reelcomment', models.TextField()),
                ('approval', models.CharField(choices=[('app', 'Approved'), ('rej', 'Rejected')], max_length=3)),
                ('commented_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('reel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reel_comments', to='core.reel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReelChatroom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('participants', models.ManyToManyField(related_name='reelchat_participants', to=settings.AUTH_USER_MODEL)),
                ('reel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.reel')),
            ],
        ),
        migrations.CreateModel(
            name='ReelChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('chatroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reelchat_message', to='core.reelchatroom')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ImageModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image_data', models.CharField(max_length=1000)),
                ('linked_to', models.CharField(choices=[('story', 'Story'), ('reels', 'Reel')], max_length=5)),
                ('linked_id', models.CharField(max_length=255)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FriendStoryActivityFeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('action', models.CharField(choices=[('spub', 'Published Story'), ('sedt', 'Edited Story'), ('slik', 'Liked Story'), ('slov', 'Loved Story'), ('scel', 'Celebrated Story'), ('scom', 'Commented On Story'), ('secm', 'Edited Comment On Story'), ('sulk', 'Unliked Story'), ('sulo', 'Unloved Story'), ('sucl', 'Uncelebrated Story')], max_length=4)),
                ('forUser', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('ownerUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='s_owner_user', to=settings.AUTH_USER_MODEL)),
                ('story', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='action_on_story', to='core.story')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FriendReelActivityFeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('action', models.CharField(choices=[('rlik', 'Liked Reel'), ('rlov', 'Loved Reel'), ('rcel', 'Celebrated Reel'), ('rulk', 'Unliked Reel'), ('rulo', 'Unloved Reel'), ('rucl', 'Uncelebrated Reel'), ('rcom', 'Commented On Reel'), ('recm', 'Edited Comment On Reel')], max_length=4)),
                ('forUser', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('ownerUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='r_owner_user', to=settings.AUTH_USER_MODEL)),
                ('reel', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='action_on_reel', to='core.reel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FriendshipRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(blank=True, verbose_name='Message')),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('rejected', models.DateTimeField(blank=True, null=True)),
                ('viewed', models.DateTimeField(blank=True, null=True)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendship_requests_sent', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendship_requests_received', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Friendship Request',
                'verbose_name_plural': 'Friendship Requests',
                'unique_together': {('from_user', 'to_user')},
            },
        ),
        migrations.CreateModel(
            name='Friend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='_unused_friend_relation', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friends', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Friend',
                'verbose_name_plural': 'Friends',
                'unique_together': {('from_user', 'to_user')},
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('followee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Following Relationship',
                'verbose_name_plural': 'Following Relationships',
                'unique_together': {('follower', 'followee')},
            },
        ),
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('blocked', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blockees', to=settings.AUTH_USER_MODEL)),
                ('blocker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocking', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Blocked Relationship',
                'verbose_name_plural': 'Blocked Relationships',
                'unique_together': {('blocker', 'blocked')},
            },
        ),
    ]
